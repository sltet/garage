basePath: /
definitions:
  appointment.Appointment:
    properties:
      createdAt:
        description: Automatically managed by GORM for creation time
        type: string
      customer_id:
        type: string
      id:
        type: string
      location_id:
        type: string
      service_id:
        type: string
      updatedAt:
        description: Automatically managed by GORM for update time
        type: string
    type: object
  company.Company:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      createdAt:
        description: Automatically managed by GORM for creation time
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        description: Automatically managed by GORM for update time
        type: string
    type: object
  core.LocalizedMessage:
    additionalProperties:
      type: string
    type: object
  operation.Operation:
    properties:
      createdAt:
        description: Automatically managed by GORM for creation time
        type: string
      description:
        $ref: '#/definitions/core.LocalizedMessage'
      id:
        type: string
      name:
        $ref: '#/definitions/core.LocalizedMessage'
      service_operation_id:
        type: string
      updatedAt:
        description: Automatically managed by GORM for update time
        type: string
    type: object
  operation.ServiceOperation:
    properties:
      createdAt:
        description: Automatically managed by GORM for creation time
        type: string
      id:
        type: string
      name:
        $ref: '#/definitions/core.LocalizedMessage'
      operations:
        items:
          $ref: '#/definitions/operation.Operation'
        type: array
      updatedAt:
        description: Automatically managed by GORM for update time
        type: string
    type: object
  servicerequest.ServiceRequest:
    properties:
      createdAt:
        description: Automatically managed by GORM for creation time
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        description: Automatically managed by GORM for update time
        type: string
    type: object
  user.User:
    properties:
      createdAt:
        description: Automatically managed by GORM for creation time
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      updatedAt:
        description: Automatically managed by GORM for update time
        type: string
    type: object
  user.UserCreate:
    description: UserCreate information with user firstname and lastname
    properties:
      email:
        example: john@doe.com
        type: string
      first_name:
        example: john
        maxLength: 20
        minLength: 2
        type: string
      last_name:
        example: doe
        maxLength: 20
        minLength: 2
        type: string
    required:
    - email
    - first_name
    - last_name
    type: object
  user.UserUpdate:
    properties:
      email:
        example: john@doe.com
        type: string
      first_name:
        example: john
        maxLength: 20
        minLength: 2
        type: string
      last_name:
        example: doe
        maxLength: 20
        minLength: 2
        type: string
    required:
    - email
    - first_name
    - last_name
    type: object
  vehicle.Vehicle:
    properties:
      createdAt:
        description: Automatically managed by GORM for creation time
        type: string
      id:
        type: string
      make:
        type: string
      model:
        type: string
      updatedAt:
        description: Automatically managed by GORM for update time
        type: string
      year:
        type: integer
    type: object
info:
  contact:
    email: steve.landry@cloudpit.ca
    name: Steve Landry Tene
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /appointments:
    get:
      consumes:
      - application/json
      description: find all appointments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/appointment.Appointment'
            type: array
      summary: find all appointments
      tags:
      - appointment
  /companies:
    get:
      consumes:
      - application/json
      description: find all companies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/company.Company'
            type: array
      summary: find all companies
      tags:
      - company
  /companies/{id}:
    get:
      consumes:
      - application/json
      description: find by id
      parameters:
      - description: the user to create
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/company.Company'
      summary: find by id
      tags:
      - company
  /service-operations:
    get:
      consumes:
      - application/json
      description: find all garage service operations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/operation.ServiceOperation'
            type: array
      summary: find all garage service operations
      tags:
      - operation
  /service-operations/{id}:
    get:
      consumes:
      - application/json
      description: find all garage service operation by id
      parameters:
      - description: service operation id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/operation.ServiceOperation'
      summary: find all garage service operation by id
      tags:
      - operation
  /service-requests:
    get:
      consumes:
      - application/json
      description: find all services requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/servicerequest.ServiceRequest'
            type: array
      summary: find all service requests
      tags:
      - service request
  /users:
    get:
      consumes:
      - application/json
      description: find all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
      summary: find all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: the user to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: create user
      tags:
      - user
  /users/{id}:
    get:
      consumes:
      - application/json
      description: find user by id
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
      summary: find user by id
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: the user id
        in: path
        name: id
        required: true
        type: string
      - description: the user to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: update user
      tags:
      - user
  /vehicles:
    get:
      consumes:
      - application/json
      description: find all vehicles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/vehicle.Vehicle'
            type: array
      summary: find all vehicles
      tags:
      - vehicle
swagger: "2.0"
